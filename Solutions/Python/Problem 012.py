# Problem 12- Highly divisible triangular number
# https://projecteuler.net/problem=12
# Answer = 76576500

def question():
    print("""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: \n\n1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ... \n\nLet us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors. \n\nWhat is the value of the first triangle number to have over five hundred divisors?
""")

def sqrt(num):
    return int(num ** 1/2)

def triangular_number(num):
    return sum(i for i in range(1 , (num+1)))

def num_of_factors(num):
    return len([i for i in range(1,sqrt(num)) if num % i == 0])

def solve(num):
    term = 1
    while True:
        triangle_num = triangular_number(term)
        if num_of_factors(triangle_num) > num:
            return triangle_num
        term += 1


def main():
    question()
    print(f"The answer is {solve(500)}")

main()
