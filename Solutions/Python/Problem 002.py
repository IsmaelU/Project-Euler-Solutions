# Problem 2 - Even Fibonacci numbers
# https://projecteuler.net/problem=2
# Answer = 4613732

def question():
    """
    Print the problem statement.
    """
    print("""
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    """)

def fib_sum(fib_list):
    """
    Calculate the sum of even numbers in a given list.

    Args:
        fib_list (list): List of numbers.

    Returns:
        int: The sum of even numbers in the list.
    """
    return sum([i for i in fib_list if i % 2 == 0])

# Solution 1: Iteration
def fibonacci(num):
    """
    Calculate the sum of even Fibonacci numbers below a given limit using iteration.

    Time Complexity: O(n)

    Args:
        num (int): The upper limit for Fibonacci numbers.

    Returns:
        int: The sum of even Fibonacci numbers below the given limit.
    """
    a = 1
    b = 1
    fib_list = []
    c = 0
    while c < num:
        fib_list.append(b)
        c = a + b
        a = b
        b = c
    return fib_sum(fib_list)

# Solution 2: Iteration with List
def fibonacci2(num):
    """
    Calculate the sum of even Fibonacci numbers below a given limit using iteration and a list.

    Time Complexity: O(n)

    Args:
        num (int): The upper limit for Fibonacci numbers.

    Returns:
        int: The sum of even Fibonacci numbers below the given limit.
    """
    fib_list = [1, 2]
    while fib_list[-1] < num:
        fib_list.append(fib_list[-1] + fib_list[-2])
    del fib_list[-1]
    return fib_sum(fib_list)

# Solution 3: Tail Recursion
def fibonacci3(n):
    """
    Calculate the sum of even Fibonacci numbers below a given limit using tail recursion.

    Time Complexity: O(n)

    Args:
        n (int): The upper limit for Fibonacci numbers.

    Returns:
        int: The sum of even Fibonacci numbers below the given limit.
    """
    fib_list = [0, 1]

    def fib_help(a, b, n):
        c = a + b
        if c < n:
            fib_list.append(c)
            return fib_help(b, c, n)
        else:
            return fib_list
    return fib_sum(fib_help(0, 1, n))

def main():
    question()
    a = 4000000
    print(f"Solution 1 (Iteration): {fibonacci(a)}")
    print(f"Solution 2 (Iteration with List): {fibonacci2(a)}")
    print(f"Solution 3 (Tail Recursion): {fibonacci3(a)}")
    print("Solution 1 and Solution 2 use iteration to generate Fibonacci numbers, while Solution 3 uses tail recursion. Solution 3 is generally more memory-efficient, as it avoids storing all Fibonacci numbers in a list.")
    
if __name__ == "__main__":
    main()
