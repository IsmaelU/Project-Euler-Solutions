# Problem 2- Even Fibonacci numbers
# https://projecteuler.net/problem=2
# Answer = 4613732

def question():
    print("""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    """)


def fib_sum(fib_list):
    return(sum([i for i in fib_list if i % 2 == 0]))


# First Solution
def fibonacci(num):
    a = 1
    b = 1
    fib_list = []
    c = 0
    while c < num:
        fib_list.append(b)
        c = a+b
        a = b
        b = c
    return fib_sum(fib_list)


# Second Solution
def fibonacci2(num):
    fib_list = [1, 2]
    while fib_list[-1] < num:
        fib_list.append(fib_list[-1] + fib_list[-2])
    del fib_list[-1]
    return fib_sum(fib_list)


# Third Solution
# My first attempt at Tail Recursion
def fibonacci3(n):
    fib_list = [0, 1]

    def fib_help(a, b, n):
        c = a+b
        if c < n:
            fib_list.append(c)
            return fib_help(b, c, n)
        else:
            return fib_list
    return fib_sum(fib_help(0, 1, n))


def main():
    question()
    a = 4000000
    print(f"The answer to the first method is {fibonacci(a)}")
    print(f"The answer to second method is {fibonacci2(a)}")
    print(f"The answer to third method is {fibonacci3(a)}")


main()
